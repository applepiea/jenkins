https://kindloveit.tistory.com/23

https://snow-line.tistory.com/228
#systemctl 사용 명령어

https://dora-guide.com/linux-commands/
#리눅스 명령어 모음






sudo apt-get install containerd -y

sudo mkdir -p /etc/containerd

containerd config default | sudo tee /etc/containerd/config.toml

sudo systemctl stop containerd

curl -LO https://github.com/containerd/containerd/releases/download/v1.4.4/containerd-1.4.4-linux-amd64.tar.gz

tar xvf containerd-1.4.4-linux-amd64.tar.gz

rm containerd-1.4.4-linux-amd64.tar.gz

sudo cp bin/* /usr/bin/

sudo systemctl start containerd

rm -rf bin

sudo systemctl status containerd --lines 1

# k8s 설치시작
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add

sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"

sudo apt-get install kubeadm kubelet kubectl -y

#kubeadm: 클러스터를 부트스트랩 함.
#kubelet: 클러스터의 모든 머신에서 실행되고 포드 및 컨테이너 시작과 같은 작업을 수행하는 구성 요소.
#kubectl: 클러스터와 통신하기 위한 명령줄 util

sudo apt-mark hold kubeadm kubelet kubectl containerd

#apt-mark는 패키지를 자동으로(종속성 관련 문제로 apt 패키지 관리자가 자동으로)  또는 수동으로(시스템 관리자가 의도적으로 직접) 설치한 것으로 표시하거나, apt-get, dselect-upgrade 또는 aptitude 등의 패키지 관리 프로그램에 의해 hold, install, deinstall 그리고 purge 명령 등의 명령이 수행된 것으로 표시하는 패키지입니다.


echo 'net.bridge.bridge-nf-call-iptables = 1' | sudo tee -a /etc/sysctl.conf

SOURCE_FILE="/etc/sysctl.conf"
LINE_INPUT="net.bridge.bridge-nf-call-iptables = 1"

grep -qF "$LINE_INPUT" "$SOURCE_FILE"  || echo "$LINE_INPUT" | sudo tee -a "$SOURCE_FILE"

sudo echo '1' | sudo tee /proc/sys/net/ipv4/ip_forward

cat /proc/sys/net/ipv4/ip_forward

sudo sysctl --system

sudo modprobe overlay

#modeprobe 모듈을 관리하는 명령어

sudo modprobe br_netfilter

sudo swapoff -a

sudo sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab

#"/etc/fstab"파일은 리눅스에서 사용하는 파일시스템 정보를 정적으로 저장하고 있는 파일이며, 리눅스의 부팅시 마운트정보를 가지고 있는 파일이다.

cat /etc/fstab
---------------------------------------------------------------------------------------------------------------
sudo kubeadm config images pull

IP_ADDR=`hostname -I | awk '{print $1}'`

sudo kubeadm init --pod-network-cidr=10.0.0.0/16 --apiserver-advertise-address=${IP_ADDR}

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


# cni 설치(칼리코)
curl https://docs.projectcalico.org/manifests/calico.yaml -O
kubectl apply -f calico.yaml

kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

sudo crictl images

apt install docker.io

# kubeadm 초기화
$ sudo kubeadm reset
$ sudo systemctl restart kubelet